<div class="card mb-4" data-controller="pdf-export">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">
      SOLL – IST <%= t('progress_tracking.progress_for', type: t("sectors_progress.#{@progress_plan.work_type_sector.key}")) %>
      (<%= @progress_plan.revision_last? ? t('progress_tracking.revision_last') : t('progress_tracking.old_revision') %>)
    </h5>
    <div class="d-flex gap-2">
      <button class="btn btn-primary btn-sm" data-action="pdf-export#export">
        <i class="bi bi-file-pdf"></i> <%= t('common.actions.export_to_pdf') %>
      </button>
      <%= link_to project_progress_tracking_index_path(@project, locale: I18n.locale), class: 'btn btn-primary btn-sm' do %>
        <i class="bi bi-arrow-left"></i> <%= t('common.back') %>
      <% end %>
    </div>
  </div>

  <div class="card-body p-5" data-pdf-export-target="content">
    <div class="row mb-4">
      <div class="col-md-12 position-relative">
        <%= image_tag "logo.png", class: "position-absolute top-0 end-0", style: "height: 50px; width: auto;" %>
        <div class="mb-3">
          <strong><%=t('progress_tracking.project_number')%></strong> <%= @project.project_number %><br>
          <strong><%=t('progress_tracking.project_name')%>:</strong> <%= @project.name %>
        </div>
        <% 
          # Calculate total target value
          total_target = if @progress_plan.work_type_sector.key == 'isometry'
            # For isometry, use the sum of all weekly SOLL values
            @progress_plan.weekly_progress_entries.sum(&:expected_value)
          else
            # For other types, use the existing meter calculation
            all_completed_items = get_completed_items(@project, @progress_plan.work_type_sector, @progress_plan.start_date)
            all_completed_items.sum { |item| calculate_ist_value(item, @progress_plan.work_type_sector) }
          end
          
          # Initialize weekly data structure
          weekly_data = {}
          
          # Get all completed items based on work type
          all_completed_items = get_completed_items(@project, @progress_plan.work_type_sector, @progress_plan.start_date)
          completed_items = if @progress_plan.work_type_sector.key == 'isometry'
            # For isometries, group by the week they were created in
            Isometry.where(project_id: @project.id)
                   .where("created_at >= ?", @progress_plan.start_date)
                   .group_by { |iso| 
                      week_num = iso.created_at.strftime('%V').to_i
                      year = iso.created_at.year
                      "W%02d/%d" % [week_num, year]
                   }
          else
            group_completed_items(all_completed_items, @progress_plan.work_type_sector, @progress_plan.start_date)
          end
          
          # Get expected progress from weekly_progress_entries
          expected_progress = @progress_plan.weekly_progress_entries
            .order(:year, :week_number)
            .each_with_object({}) do |entry, hash|
              week_key = "W%02d/%d" % [entry.week_number, entry.year]
              hash[week_key] = entry.expected_value.to_f
            end
            
          # Calculate cumulative totals and percentages
          soll_total = 0  # SOLL TOTAL
          ist_total = 0   # IST TOTAL
          
          # Get start and end dates as Date objects for proper week calculations
          start_date = @progress_plan.start_date.to_date
          end_date = @progress_plan.end_date.to_date
          current_date = Time.current.to_date
          
          # Iterate through each week between start and end dates
          date = start_date
          while date <= end_date
            week_key = "W%02d/%d" % [date.strftime('%V').to_i, date.year]
            
            # Calculate SOLL values
            soll_value = expected_progress[week_key] || 0
            soll_total += soll_value
            
            # Calculate IST values
            ist_value = if @progress_plan.work_type_sector.key == 'isometry'
              # For isometries, count actual isometries created this week
              (completed_items[week_key] || []).count
            else
              # For other types, use actual completed items
              completed_items[week_key]&.sum { |item| 
                calculate_ist_value(item, @progress_plan.work_type_sector)
              } || 0
            end
            ist_total += ist_value
            
            # Calculate percentages based on total target
            soll_percentage = total_target > 0 ? ((soll_total / total_target) * 100).round : 0
            ist_percentage = total_target > 0 ? ((ist_total / total_target) * 100).round : 0
            
            weekly_data[week_key] = {
              soll_meters: soll_value,
              soll_total: soll_total,
              soll_percentage: soll_percentage,
              ist_meters: ist_value,
              ist_total: ist_total,
              ist_percentage: ist_percentage
            }
            
            # Move to next week
            date = date + 7.days
          end
        %>
        
        <div class="mb-4 text-center">
          <h4> SOLL – IST <%= t("sectors_progress.#{@progress_plan.work_type_sector.key}") %></h4>
          <p class="text-muted">
            <%= l(@progress_plan.start_date.to_date, format: :long) %> - <%= l(@progress_plan.end_date.to_date, format: :long) %><br>
            <%= t('common.generated_at') %>: <%= l(@progress_plan.created_at, format: :long) %>
          </p>
        </div>
            
    <%
      # Calculate differences for column chart
      differences = weekly_data.values.map do |v|
        soll = v[:soll_percentage]
        ist = v[:ist_percentage]
        diff = ist - soll
        if diff != 0
          {
            y: [soll, ist].max,       # End point of the bar
            low: [soll, ist].min,     # Start point of the bar
            difference: diff.abs,      # Store the absolute difference
            color: '#FFB6C1',         # Pink color for difference bars
            dataLabels: {
              y: diff > 0 ? -5 : 5,   # Position labels inside the bar
              format: '{point.difference}%'  # Show the stored difference
            }
          }
        end
      end

      chart_data = {
        xAxis: { categories: weekly_data.keys.map { |week| format_week_display(week) } },
        yAxis: {
          min: 0,
          max: 100,
          title: { text: t('progress_tracking.progress_percentage') },
          labels: { format: "{value}%" },
          tickInterval: 10
        },
        series: [
          {
            name: t('progress_tracking.table.soll'),
            type: 'line',
            data: weekly_data.values.map { |v| v[:soll_percentage] },
            color: '#0d6efd',  # Bootstrap primary blue
            marker: {
              enabled: true,
              radius: 4
            },
            zIndex: 3
          },
          {
            name: t('progress_tracking.table.ist'),
            type: 'line',
            data: weekly_data.values.map { |v| v[:ist_percentage] },
            color: '#198754',  # Bootstrap success green
            marker: {
              enabled: true,
              radius: 4
            },
            zIndex: 2
          },
          {
            name: t('progress_tracking.table.difference'),
            type: 'column',
            data: differences,
            color: '#FFB6C1',
            pointPadding: 0.2,
            groupPadding: 0.2,
            borderWidth: 0,
            zIndex: 1
          }
        ],
        plotOptions: {
          column: {
            grouping: false,
            shadow: false,
            borderWidth: 0,
            maxPointWidth: 30  # Limit maximum width of bars
          },
          series: {
            states: {
              hover: {
                enabled: true,
                brightness: 0.1
              }
            }
          }
        }
      }
    %>
    <div data-controller="chart" data-chart="<%= chart_data.to_json %>" id="container"></div>
      </div>
    </div>

    <%
      # Configure row distribution
      first_page_rows = 20
      rows_per_extra_page = 32
      all_rows = weekly_data.to_a
      remaining_rows = all_rows.length - first_page_rows
      extra_pages_needed = (remaining_rows.to_f / rows_per_extra_page).ceil
    %>

    <!-- Original table for normal viewing -->
    <div class="table-responsive d-print-none">
      <table class="table table-hover">
        <thead>
          <tr>
            <th><%= t('progress_tracking.table.week') %></th>
            <th><%= t('progress_tracking.table.soll') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.ist') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.soll_total') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.ist_total') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.soll') %> %</th>
            <th><%= t('progress_tracking.table.ist') %> %</th>
          </tr>
        </thead>
        <tbody>
          <% weekly_data.each do |week, data| %>
            <tr>
              <td><%= format_week_display(week) %></td>
              <td>
                <%= form_with(url: project_progress_tracking_path(@project, @progress_plan, locale: I18n.locale),
                    method: :patch,
                    local: true,
                    class: 'edit-expected') do |f| %>
                  <% week_num = week.match(/W(\d+)\/\d+/)[1].to_i %>
                  <% year = week.match(/W\d+\/(\d+)/)[1].to_i %>
                  <%= hidden_field_tag 'weekly_entry[week_number]', week_num %>
                  <%= hidden_field_tag 'weekly_entry[year]', year %>
                  <div class="input-group input-group-sm" style="max-width: 120px;">
                    <%= number_field_tag 'weekly_entry[expected_value]',
                        data[:soll_meters],
                        step: '0.1',
                        class: 'form-control form-control-sm',
                        style: 'width: 50px; min-width: 50px; padding-left: 2px; padding-right: 2px;',
                        onchange: 'this.form.requestSubmit()',
                        disabled: @progress_plan.locked? || !user_signed_in? || !current_user&.admin?,
                        title: @progress_plan.locked? ? t('progress_tracking.locked_error') : (!user_signed_in? || !current_user&.admin? ? t('progress_tracking.admin_only_error') : nil) %>
                    <span class="input-group-text" style="padding: 0 4px;"><%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></span>
                  </div>
                <% end %>
              </td>
              <td><%= number_with_precision(data[:ist_meters], precision: 1) %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></td>
              <td><%= number_with_precision(data[:soll_total], precision: 0) %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></td>
              <td><%= number_with_precision(data[:ist_total], precision: 0) %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></td>
              <td><%= number_with_precision(data[:soll_percentage], precision: 0) %>%</td>
              <td><%= number_with_precision(data[:ist_percentage], precision: 0) %>%</td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>

    <!-- First page table section for PDF (includes first 20 rows) -->
    <div class="table-responsive d-none pdf-first-page-table">
      <table class="table table-hover">
        <thead>
          <tr>
            <th><%= t('progress_tracking.table.week') %></th>
            <th><%= t('progress_tracking.table.soll') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.ist') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.soll_total') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.ist_total') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
            <th><%= t('progress_tracking.table.soll') %> %</th>
            <th><%= t('progress_tracking.table.ist') %> %</th>
          </tr>
        </thead>
        <tbody>
          <% all_rows[0...first_page_rows].each do |week, data| %>
            <tr>
              <td><%= format_week_display(week) %></td>
              <td><%= number_with_precision(data[:soll_meters], precision: 1) %></td>
              <td><%= number_with_precision(data[:ist_meters], precision: 1) %></td>
              <td><%= number_with_precision(data[:soll_total], precision: 1) %></td>
              <td><%= number_with_precision(data[:ist_total], precision: 1) %></td>
              <td><%= data[:soll_percentage] %>%</td>
              <td><%= data[:ist_percentage] %>%</td>
            </tr>
          <% end %>
        </tbody>
      </table>
    </div>

    <!-- Remaining pages table sections for PDF -->
    <% extra_pages_needed.times do |page| %>
      <div class="table-responsive d-none pdf-extra-page-table" data-page="<%= page %>">
        <table class="table table-hover">
          <thead>
            <tr>
              <th><%= t('progress_tracking.table.week') %></th>
              <th><%= t('progress_tracking.table.soll') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
              <th><%= t('progress_tracking.table.ist') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
              <th><%= t('progress_tracking.table.soll_total') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
              <th><%= t('progress_tracking.table.ist_total') %> <%= @progress_plan.work_type_sector.key == 'isometry' ? 'pcs' : progress_unit(@progress_plan.work_type_sector) %></th>
              <th><%= t('progress_tracking.table.soll') %> %</th>
              <th><%= t('progress_tracking.table.ist') %> %</th>
            </tr>
          </thead>
          <tbody>
            <% 
              start_idx = first_page_rows + (page * rows_per_extra_page)
              end_idx = [start_idx + rows_per_extra_page, all_rows.length].min
              page_rows = all_rows[start_idx...end_idx]
            %>
            <% page_rows.each do |week, data| %>
              <tr>
                <td><%= format_week_display(week) %></td>
                <td><%= number_with_precision(data[:soll_meters], precision: 1) %></td>
                <td><%= number_with_precision(data[:ist_meters], precision: 1) %></td>
                <td><%= number_with_precision(data[:soll_total], precision: 1) %></td>
                <td><%= number_with_precision(data[:ist_total], precision: 1) %></td>
                <td><%= data[:soll_percentage] %>%</td>
                <td><%= data[:ist_percentage] %>%</td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </div>
    <% end %>

  </div>
</div>
